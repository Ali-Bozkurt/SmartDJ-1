{"remainingRequest":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Chris/Desktop/Programming/VueVisualizer/src/views/Player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/src/views/Player.vue","mtime":1546743901000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/cache-loader/dist/cjs.js","mtime":1546594483000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SpotifyService from '@/services/SpotifyService';\n\nexport default {\n\tdata() {\n\t\treturn {\n      token: '',\n      artist: '',\n\t\t\talbum: '',\n\t\t\ttrack: '',\n\t\t\tpaused: true,\n\t\t\tdevices: [],\n\t\t\tshuffle: false,\n\t\t\trepeatToggle: 1,\n      volume: 100,\n      primary_user: '',\n      primary_type: '',\n      tokenExists: true,\n\t\t\tauthWindow: Window,\n\t\t}\n  },\n  sockets: {\n\t},\n\tcreated() {\n\t\tthis.getToken().then(() => {\n\t\t\t//this.getCurrentlyPlaying();\n\t\t\tthis.getAccount();\n    });\n\t},\n\tmethods: {\n\t\tasync getToken() {\n      if(localStorage.access_token) {\n        const response = await SpotifyService.refreshToken(localStorage.refresh_token);\n        if(response.data.success === true) {\n          var t_token = response.data.access_token;\n          localStorage.setItem('access_token', t_token);\n          this.token = localStorage.access_token;\n          this.tokenExists = true;\n\t\t\t\t  this.getAccount();\n        } else {\n          alert(\"Oops! Something went wrong linking your Spotify Account\");\n          this.tokenExists = false;\n        }\n\t\t\t} \n\t\t\telse {\n        alert(\"Oops! Something went wrong linking your Spotify Account\");\n        this.tokenExists = false;\n\t\t\t}\n\t\t},\n    async linkAccount() {\n\t\t\tthis.$wait.start('api');\n\t\t\tconst loginResponse = await SpotifyService.login();\n\t\t\tthis.$wait.end('api');\n\t\t\tvar url = (loginResponse.data.redirect);\n\t\t\tthis.authWindow.open(url, '_blank', \"height=500,width=500,toolbar=no,menubar=no,scrollbars=no,location=no,status=no left=300 top=200\");\n\t\t},\n\t\tasync checkToken() {\n\t\t if(localStorage.access_token) {\n        this.tokenExists = true;\n        this.token = localStorage.access_token;\n      } else {\n        this.tokenExists = false;\n        alert('Something went wrong linking your Spotify account!');\n      }\n\t\t},\n    async getDevices() {\n\t\t\tconst response = await SpotifyService.getDevices();\n\t\t\tif(response.data.success) {\n\t\t\t\tthis.devices = response.data.devices;\n\t\t\t}\n    },\n    async getCurrentlyPlaying() {\n      const response = await SpotifyService.getCurrentlyPlaying(this.token);\n\t\t\tif(response.data.is_playing === false && response.data.body === null) {\n        const res = await SpotifyService.getRecentlyPlayed(this.token);\n        if(res.data.success === true) {\n          var id = res.data.object.items[0].track.id;\n          const re = await SpotifyService.getTrackInfo(this.token, id);\n          if(re.data.success === true) {\n            this.album = re.data.track.album.name;\n            this.artist = re.data.track.album.artists[0].name +\" | \"+this.album;\n            this.track = re.data.track.name;\n            this.paused = true;\n          }\n        } else {\n\t\t\t\t\tthis.album = '';\n          this.artist = '';\n          this.track = '';\n\t\t\t\t\tthis.paused = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.album = response.data.object.item.album.name;\n\t\t\t\tthis.artist = response.data.object.item.album.artists[0].name +\" | \"+this.album;\n\t\t\t\tthis.track = response.data.object.item.name;\n\t\t\t\tthis.paused = !response.data.is_playing;\n\t\t\t}\n    },\n    async getAccount() {\n      const profileResponse = await SpotifyService.getProfile(this.token);\n\t\t\tthis.primary_user = profileResponse.data.name;\n\t\t\tthis.primary_type = profileResponse.data.type;\n\t\t\tthis.primary_type = this.primary_type.charAt(0).toUpperCase() + this.primary_type.slice(1);\n\t\t},\n\t\tasync play() {\n\t\t\tconst response = await SpotifyService.play({access_token: this.token});\n\t\t\tif(response.data.success === true)\n\t\t\t\tthis.paused = false;\n\t\t},\n\t\tasync pause() {\n\t\t\tconst response = await SpotifyService.pause({access_token: this.token});\n\t\t\tif(response.data.success === true)\n\t\t\t\tthis.paused = true;\n\t\t},\n\t\tasync next() {\n\t\t\tconst response = await SpotifyService.nextTrack({access_token: this.token});\n\t\t\tif(response.data.success === true) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.getCurrentlyPlaying();\n\t\t\t\t}, 300); \n\t\t\t}\n\t\t},\n\t\tasync prev() {\n\t\t\tconst response = await SpotifyService.previousTrack({access_token: this.token});\n\t\t\tif(response.data.success === true) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.getCurrentlyPlaying();\n\t\t\t\t}, 300); \n\t\t\t}\n\t\t},\n\t\tasync toggleShuffle() {\n\t\t\tif(this.shuffle === false) {\n\t\t\t\tconst response = await SpotifyService.shuffle({shuffle: true, access_token: this.token});\n\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\tthis.shuffle = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst response = await SpotifyService.shuffle({shuffle: false, access_token: this.token});\n\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\tthis.shuffle = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync toggleRepeat() {\n\t\t\tswitch(this.repeatToggle) {\n\t\t\t\tcase 1:\n\t\t\t\t\tconst response = await SpotifyService.repeat({type: 'track', access_token: this.token});\n\t\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 2;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tconst response2 = await SpotifyService.repeatPrimary({type: 'context', access_token: this.token});\n\t\t\t\t\tif(response2.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: \n\t\t\t\t\tconst response3 = await SpotifyService.repeatPrimary({type: 'off', access_token: this.token});\n\t\t\t\t\tif(response3.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tasync setVolume(volume) {\n\t\t\tawait SpotifyService.setVolume({volumePercent: volume, access_token: this.token});\n\t\t},\n\t}\n}\n",{"version":3,"sources":["Player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Player.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Spotify Player</h1>\n  \t\t<h2>Start playback from anywhere else</h2>\n      <md-app>\n\n      \t\t<md-app-content>\n\t\t\t\t\t\t<b-container fluid>\n\t\t\t\t\t\t\t<b-row>\n\t\t\t\t\t\t\t\t<b-col style='text-align:left'>\n\t\t\t\t\t\t\t\t\t<h2 class='md-title'>Primary Spotify Account</h2>\n\t\t\t\t\t\t\t\t\t<div class='md-subhead' style='overflow-wrap:break-word'>This is the account that will be used for music streaming</div>\n\t\t\t\t\t\t\t\t</b-col>\n\t\t\t\t\t\t\t\t<b-col>\n\t\t\t\t\t\t\t\t\t<div v-if='tokenExists===true'>\n\t\t\t\t\t\t\t\t\t\t<md-card class='spotifyCard'>\n      \t\t\t\t\t\t\t\t\t<md-card-header>\n        \t\t\t\t\t\t\t\t\t\t<md-card-header-text>\n          \t\t\t\t\t\t\t\t\t\t<div class=\"md-title\">{{primary_user}}</div>\n          \t\t\t\t\t\t\t\t\t\t<div class=\"md-subhead\">{{primary_type}}</div>\n        \t\t\t\t\t\t\t\t\t\t</md-card-header-text>\n\n        \t\t\t\t\t\t\t\t\t\t<md-card-media>\n          \t\t\t\t\t\t\t\t\t\t<img src=\"@/assets/spotifyLogo.png\" alt=\"Spotify\">\n        \t\t\t\t\t\t\t\t\t\t</md-card-media>\n      \t\t\t\t\t\t\t\t\t</md-card-header>\n\n      \t\t\t\t\t\t\t\t\t<md-card-actions>\n        \t\t\t\t\t\t\t\t\t\t<md-button @click='deleteToken()'>Unlink</md-button>\n      \t\t\t\t\t\t\t\t\t</md-card-actions>\n    \t\t\t\t\t\t\t\t\t</md-card>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div v-if='tokenExists===false'>\n\t\t\t\t\t\t\t\t\t\t<md-card class='spotifyCard'>\n      \t\t\t\t\t\t\t\t  <md-card-header>\n        \t\t\t\t\t\t\t\t\t\t<md-card-header-text>\n          \t\t\t\t\t\t\t\t\t\t<div class=\"md-title\">No Primary Account</div>\n          \t\t\t\t\t\t\t\t\t\t<div class=\"md-subhead\">Link a new account</div>\n        \t\t\t\t\t\t\t\t\t\t</md-card-header-text>\n\n        \t\t\t\t\t\t\t\t\t\t<md-card-media>\n          \t\t\t\t\t\t\t\t\t\t<img src=\"@/assets/spotifyLogo.png\" alt=\"Spotify\">\n        \t\t\t\t\t\t\t\t\t\t</md-card-media>\n      \t\t\t\t\t\t\t\t\t</md-card-header>\n\n      \t\t\t\t\t\t\t\t\t<md-card-actions>\n        \t\t\t\t\t\t\t\t\t\t<md-button @click='linkAccount()'>Link Account</md-button>\n      \t\t\t\t\t\t\t\t\t</md-card-actions>\n    \t\t\t\t\t\t\t\t\t</md-card>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</b-col>\n\t\t\t\t\t\t\t</b-row>\n\t\t\t\t\t\t\t<hr>\n\t\t\t\t\t\t\t<b-row>\n\t\t\t\t\t\t\t\t<b-col style='text-align:left;'>\n\t\t\t\t\t\t\t\t\t<h2 class='md-title'>Playback</h2>\n\t\t\t\t\t\t\t\t\t<div class='md-subhead' style='overflow-wrap:break-word'>Control the playback of the current Primary Account</div>\n\t\t\t\t\t\t\t\t</b-col>\n        \t\t\t\t\t\t<b-col style='text-align:right'>\n\t\t\t\t\t\t\t\t\t<span>Current Active Device:</span>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<div v-for='device in devices' :key='device.name'>\n\t\t\t\t\t\t\t\t\t\t<span v-if='device.is_active'>{{device.name}}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t</b-col>\n        \t\t\t\t\t<div class=\"w-100\"></div>\n        \t\t\t\t\t\t<b-col style='text-align:left'>\n\t\t\t\t\t\t\t  \t\t<div style='color:green'>\n\t\t\t\t\t\t\t\t\t\t<p>Currently Playing:</p>\n\t\t\t\t\t\t\t\t\t\t<p style='margin-top:-5px;'>{{track}}<br>{{artist}}</p>\n\t\t\t\t\t\t\t  \t\t</div>\n\t\t\t\t\t\t\t\t\t<b-button-toolbar style='margin-left:-5px;' aria-label=\"Toolbar with button groups\">\n\t\t\t\t\t\t\t\t\t\t<b-button-group size=\"lg\" class=\"mx-1\">\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='repeatToggle===1' @click='toggleRepeat()' class='invertedPlaybackControls'><font-awesome-icon icon='redo'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='repeatToggle===2' @click='toggleRepeat()' class='halfPlaybackControls'><font-awesome-icon icon='redo'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='repeatToggle===3' @click='toggleRepeat()' class='playbackControls'><font-awesome-icon icon='redo'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn @click='prev' class='invertedPlaybackControls'><font-awesome-icon icon='step-backward' /></b-btn>\n\t\t\t\t\t\t\t\t\t\t</b-button-group>\n\t\t\t\t\t\t\t\t\t\t<b-button-group size=\"lg\" class=\"mx-1\">\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='paused===true' @click='play()' class='invertedPlaybackControls' style='border-radius:50%;'><font-awesome-icon icon='play' /></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-else-if='paused===false' @click='pause()' class='playbackControls' style='border-radius:50%;'><font-awesome-icon icon='pause'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t</b-button-group>\n\t\t\t\t\t\t\t\t\t\t<b-button-group size=\"lg\" class=\"mx-1\">\n\t\t\t\t\t\t\t\t\t\t\t<b-btn @click='next' class='invertedPlaybackControls'><font-awesome-icon icon='step-forward' /></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='shuffle===false' @click='toggleShuffle()' class='invertedPlaybackControls'><font-awesome-icon icon='random'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t\t<b-btn v-if='shuffle===true' class='playbackControls' @click='toggleShuffle()'><font-awesome-icon icon='random'/></b-btn>\n\t\t\t\t\t\t\t\t\t\t</b-button-group>\n\t\t\t\t\t\t\t\t\t</b-button-toolbar>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<font-awesome-icon icon='volume-down' size='2x'/><input class='slider' style='width:50%; margin-left:10px;margin-right:10px;' type=\"range\" v-model.number='volume' min=\"0\" max=\"100\" @change='setVolume(volume)'><font-awesome-icon icon='volume-up' size='2x'/>\n\t\t\t\t\t\t\t\t</b-col>\n\t\t\t\t\t\t\t<b-col>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</b-col>\n\t\t\t\t\t</b-row>\n\t\t\t\t</b-container>\n      </md-app-content>\n    </md-app>\n\t</div>\n</template>\n\n<script>\nimport SpotifyService from '@/services/SpotifyService';\n\nexport default {\n\tdata() {\n\t\treturn {\n      token: '',\n      artist: '',\n\t\t\talbum: '',\n\t\t\ttrack: '',\n\t\t\tpaused: true,\n\t\t\tdevices: [],\n\t\t\tshuffle: false,\n\t\t\trepeatToggle: 1,\n      volume: 100,\n      primary_user: '',\n      primary_type: '',\n      tokenExists: true,\n\t\t\tauthWindow: Window,\n\t\t}\n  },\n  sockets: {\n\t},\n\tcreated() {\n\t\tthis.getToken().then(() => {\n\t\t\t//this.getCurrentlyPlaying();\n\t\t\tthis.getAccount();\n    });\n\t},\n\tmethods: {\n\t\tasync getToken() {\n      if(localStorage.access_token) {\n        const response = await SpotifyService.refreshToken(localStorage.refresh_token);\n        if(response.data.success === true) {\n          var t_token = response.data.access_token;\n          localStorage.setItem('access_token', t_token);\n          this.token = localStorage.access_token;\n          this.tokenExists = true;\n\t\t\t\t  this.getAccount();\n        } else {\n          alert(\"Oops! Something went wrong linking your Spotify Account\");\n          this.tokenExists = false;\n        }\n\t\t\t} \n\t\t\telse {\n        alert(\"Oops! Something went wrong linking your Spotify Account\");\n        this.tokenExists = false;\n\t\t\t}\n\t\t},\n    async linkAccount() {\n\t\t\tthis.$wait.start('api');\n\t\t\tconst loginResponse = await SpotifyService.login();\n\t\t\tthis.$wait.end('api');\n\t\t\tvar url = (loginResponse.data.redirect);\n\t\t\tthis.authWindow.open(url, '_blank', \"height=500,width=500,toolbar=no,menubar=no,scrollbars=no,location=no,status=no left=300 top=200\");\n\t\t},\n\t\tasync checkToken() {\n\t\t if(localStorage.access_token) {\n        this.tokenExists = true;\n        this.token = localStorage.access_token;\n      } else {\n        this.tokenExists = false;\n        alert('Something went wrong linking your Spotify account!');\n      }\n\t\t},\n    async getDevices() {\n\t\t\tconst response = await SpotifyService.getDevices();\n\t\t\tif(response.data.success) {\n\t\t\t\tthis.devices = response.data.devices;\n\t\t\t}\n    },\n    async getCurrentlyPlaying() {\n      const response = await SpotifyService.getCurrentlyPlaying(this.token);\n\t\t\tif(response.data.is_playing === false && response.data.body === null) {\n        const res = await SpotifyService.getRecentlyPlayed(this.token);\n        if(res.data.success === true) {\n          var id = res.data.object.items[0].track.id;\n          const re = await SpotifyService.getTrackInfo(this.token, id);\n          if(re.data.success === true) {\n            this.album = re.data.track.album.name;\n            this.artist = re.data.track.album.artists[0].name +\" | \"+this.album;\n            this.track = re.data.track.name;\n            this.paused = true;\n          }\n        } else {\n\t\t\t\t\tthis.album = '';\n          this.artist = '';\n          this.track = '';\n\t\t\t\t\tthis.paused = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.album = response.data.object.item.album.name;\n\t\t\t\tthis.artist = response.data.object.item.album.artists[0].name +\" | \"+this.album;\n\t\t\t\tthis.track = response.data.object.item.name;\n\t\t\t\tthis.paused = !response.data.is_playing;\n\t\t\t}\n    },\n    async getAccount() {\n      const profileResponse = await SpotifyService.getProfile(this.token);\n\t\t\tthis.primary_user = profileResponse.data.name;\n\t\t\tthis.primary_type = profileResponse.data.type;\n\t\t\tthis.primary_type = this.primary_type.charAt(0).toUpperCase() + this.primary_type.slice(1);\n\t\t},\n\t\tasync play() {\n\t\t\tconst response = await SpotifyService.play({access_token: this.token});\n\t\t\tif(response.data.success === true)\n\t\t\t\tthis.paused = false;\n\t\t},\n\t\tasync pause() {\n\t\t\tconst response = await SpotifyService.pause({access_token: this.token});\n\t\t\tif(response.data.success === true)\n\t\t\t\tthis.paused = true;\n\t\t},\n\t\tasync next() {\n\t\t\tconst response = await SpotifyService.nextTrack({access_token: this.token});\n\t\t\tif(response.data.success === true) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.getCurrentlyPlaying();\n\t\t\t\t}, 300); \n\t\t\t}\n\t\t},\n\t\tasync prev() {\n\t\t\tconst response = await SpotifyService.previousTrack({access_token: this.token});\n\t\t\tif(response.data.success === true) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.getCurrentlyPlaying();\n\t\t\t\t}, 300); \n\t\t\t}\n\t\t},\n\t\tasync toggleShuffle() {\n\t\t\tif(this.shuffle === false) {\n\t\t\t\tconst response = await SpotifyService.shuffle({shuffle: true, access_token: this.token});\n\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\tthis.shuffle = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst response = await SpotifyService.shuffle({shuffle: false, access_token: this.token});\n\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\tthis.shuffle = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync toggleRepeat() {\n\t\t\tswitch(this.repeatToggle) {\n\t\t\t\tcase 1:\n\t\t\t\t\tconst response = await SpotifyService.repeat({type: 'track', access_token: this.token});\n\t\t\t\t\tif(response.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 2;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tconst response2 = await SpotifyService.repeatPrimary({type: 'context', access_token: this.token});\n\t\t\t\t\tif(response2.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: \n\t\t\t\t\tconst response3 = await SpotifyService.repeatPrimary({type: 'off', access_token: this.token});\n\t\t\t\t\tif(response3.data.success === true) {\n\t\t\t\t\t\tthis.repeatToggle = 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tasync setVolume(volume) {\n\t\t\tawait SpotifyService.setVolume({volumePercent: volume, access_token: this.token});\n\t\t},\n\t}\n}\n</script>\n\n<style>\n.md-app {\n    border: 1px solid rgba(#000, .12);\n\t\tmargin-right:20px;\n\t\tmargin-left:20px;\n  }\n  .md-drawer {\n    width: 230px;\n    max-width: calc(100vw - 125px);\n  }\n\t.btn{\n\t\tcolor: #42b983;\n\t}\n\t.md-label {\n\t\ttext-align:center;\n\t}\n\t.md-table-head-container {\n\t\tmax-height:10px;\n\t\ttext-align:center;\n\t}\n\t.md-table-row:hover .md-table-cell {\n\t\tbackground-color: #bdf3db\n\t}\n\t.spotifyCard {\n\t\ttext-align:left;\n    margin: 10px;\n\t\tfloat:right;\n  }\n\t.md-table-head-label{\n\t\ttext-align:center;\n\t}\n\t.active {\n\t\tbackground-color: #bdf3db\n\t}\n\t.playbackControls{\n\t\tcolor:white;\n\t\tbackground-color:#42b983;\n\t\tborder:#42b983;\n\t\tmargin-top:10px;\n\t}\n\t.playbackControls:active {\n\t\toutline-color: none;\n\t\tborder: none;\n\t}\n\t.invertedPlaybackControls:active {\n\t\toutline-color: none;\n\t\tborder: none;\n\t}\n\t.invertedPlaybackControls {\n\t\tcolor: #42b983;\n\t\tbackground-color:white;\n\t\tborder:white;\n\t\tmargin-top:10px;\n\t}\n\t.halfPlaybackControls {\n\t\tcolor: #42b983;\n\t\tbackground: linear-gradient(0deg, #42b983 50%, #ffffff 50%);\n\t\tborder:white;\n\t\tmargin-top:10px;\n\t}\n\n\tinput[type=range].slider {\n  -webkit-appearance: none;\n  width: 100%;\n  margin: 13.8px 0;\n}\ninput[type=range].slider:focus {\n  outline: none;\n}\ninput[type=range].slider::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 8.4px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 1), 0px 0px 1px rgba(13, 13, 13, 1);\n  background: #42b983;\n  border-radius: 25px;\n  border: 0px solid rgba(255, 255, 255, 0);\n}\ninput[type=range].slider::-webkit-slider-thumb {\n  box-shadow: 0.9px 0.9px 1px rgba(0, 0, 0, 1), 0px 0px 0.9px rgba(13, 13, 13, 1);\n  border: 0px solid #000000;\n  height: 36px;\n  width: 16px;\n  border-radius: 3px;\n  background: #ffffff;\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -13.8px;\n}\ninput[type=range].slider:focus::-webkit-slider-runnable-track {\n  background: #53c28f;\n}\ninput[type=range].slider::-moz-range-track {\n  width: 100%;\n  height: 8.4px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n  background: #42b983;\n  border-radius: 25px;\n  border: 0px solid rgba(255, 255, 255, 0);\n}\ninput[type=range].slider::-moz-range-thumb {\n  box-shadow: 0.9px 0.9px 1px rgba(0, 0, 0, 1), 0px 0px 0.9px rgba(13, 13, 13, 1);\n  border: 0px solid #000000;\n  height: 36px;\n  width: 16px;\n  border-radius: 3px;\n  background: #ffffff;\n  cursor: pointer;\n}\ninput[type=range].slider::-ms-track {\n  width: 100%;\n  height: 8.4px;\n  cursor: pointer;\n  background: transparent;\n  border-color: transparent;\n  color: transparent;\n}\ninput[type=range].slider::-ms-fill-lower {\n  background: #3ba676;\n  border: 0px solid rgba(255, 255, 255, 0);\n  border-radius: 50px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range].slider::-ms-fill-upper {\n  background: #42b983;\n  border: 0px solid rgba(255, 255, 255, 0);\n  border-radius: 50px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range].slider::-ms-thumb {\n  box-shadow: 0.9px 0.9px 1px rgba(0, 0, 0, 1), 0px 0px 0.9px rgba(13, 13, 13, 1);\n  border: 0px solid #000000;\n  height: 36px;\n  width: 16px;\n  border-radius: 3px;\n  background: #ffffff;\n  cursor: pointer;\n  height: 8.4px;\n}\ninput[type=range].slider:focus::-ms-fill-lower {\n  background: #42b983;\n}\ninput[type=range].slider:focus::-ms-fill-upper {\n  background: #53c28f;\n}\n</style>\n"]}]}
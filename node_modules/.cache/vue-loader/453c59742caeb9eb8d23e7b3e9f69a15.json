{"remainingRequest":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Chris/Desktop/Programming/VueVisualizer/src/views/WebPlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/src/views/WebPlayer.vue","mtime":1546593762000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/cache-loader/dist/cjs.js","mtime":1546594483000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport SpotifyService from '@/services/SpotifyService';\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttoken: '',\n\t\t}\n\t},\n\tcreated() {\n\t\tlet webPlayerSDK = document.createElement('script');    \n\t\twebPlayerSDK.setAttribute('src',\"https://sdk.scdn.co/spotify-player.js\");\n\t\tdocument.head.appendChild(webPlayerSDK);\n\t\tconsole.log('script inserted');\n\t\tthis.getToken();\n\t\tthis.webPlayer();\n\t},\n\tmethods: {\n\t\tasync getToken() {\n\t\t\tconst response = await SpotifyService.getPrimaryToken();\n\t\t\tthis.token = response.data.access_token;\n\t\t},\n\t\tasync webPlayer() {\n\t\t\twindow.onSpotifyWebPlaybackSDKReady = () => {\n     \t\t \tvar id;\n\t\t\t\tvar player;\n\t\t\t\tthis.player = new Spotify.Player({\n         \t\tname: 'SmartDJ',\n           \t\tgetOAuthToken: cb => {\n\t\t\t\t\t\tthis.getToken();\n              \t\tcb(this.token);\n            \t}\n\t\t\t \t});\n\t\t\t \n\t\t\t \t// Error handling\n          \tthis.player.addListener('initialization_error', ({\n          \t\tmessage\n        \t\t}) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('authentication_error', ({\n            message\n          \t}) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('account_error', ({\n            \tmessage\n         \t }) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('playback_error', ({\n            \tmessage\n          \t}) => {\n            \tconsole.error(message);\n\t\t\t \t});\n\t\t\t \n\t\t\t\t// Playback status updates\n         \tthis.player.addListener('player_state_changed', state => {\n         \t\tconsole.log(state);\n            \tthis.$socket.emit('stateChanged', {state});\n\t\t\t\t});\n\t\t\t\n\t\t\t\t// Ready\n          \tthis.player.addListener('ready', ({\n          \t  device_id\n          \t}) => {\n          \t\tconsole.log('Ready with Device ID', device_id);\n\t\t\t\t\tthis.$socket.emit('ready', {id: device_id});\n\t\t\t \t});\n\n\t\t\t \t// Not Ready\n          \tthis.player.addListener('not_ready', ({\n            \tdevice_id\n          \t}) => {\n            \tconsole.log('Device ID has gone offline', device_id);\n          \t});\n\n          \t// Connect to the player!\n          \tthis.player.connect().then(success => {\n            \tif (success) {\n              \tconsole.log('Webplayback SDK successfully connected to Spotify');\n            \t}\n\t\t\t \t});\n\t\t\t}\n\t\t}\n\t}\n}\n",{"version":3,"sources":["WebPlayer.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WebPlayer.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Spotify Player</h1>\n  \t\t<h2>Start playback from anywhere else</h2>\n\t</div>\n</template>\n\n<script>\nimport SpotifyService from '@/services/SpotifyService';\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttoken: '',\n\t\t}\n\t},\n\tcreated() {\n\t\tlet webPlayerSDK = document.createElement('script');    \n\t\twebPlayerSDK.setAttribute('src',\"https://sdk.scdn.co/spotify-player.js\");\n\t\tdocument.head.appendChild(webPlayerSDK);\n\t\tconsole.log('script inserted');\n\t\tthis.getToken();\n\t\tthis.webPlayer();\n\t},\n\tmethods: {\n\t\tasync getToken() {\n\t\t\tconst response = await SpotifyService.getPrimaryToken();\n\t\t\tthis.token = response.data.access_token;\n\t\t},\n\t\tasync webPlayer() {\n\t\t\twindow.onSpotifyWebPlaybackSDKReady = () => {\n     \t\t \tvar id;\n\t\t\t\tvar player;\n\t\t\t\tthis.player = new Spotify.Player({\n         \t\tname: 'SmartDJ',\n           \t\tgetOAuthToken: cb => {\n\t\t\t\t\t\tthis.getToken();\n              \t\tcb(this.token);\n            \t}\n\t\t\t \t});\n\t\t\t \n\t\t\t \t// Error handling\n          \tthis.player.addListener('initialization_error', ({\n          \t\tmessage\n        \t\t}) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('authentication_error', ({\n            message\n          \t}) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('account_error', ({\n            \tmessage\n         \t }) => {\n            \tconsole.error(message);\n          \t});\n          \tthis.player.addListener('playback_error', ({\n            \tmessage\n          \t}) => {\n            \tconsole.error(message);\n\t\t\t \t});\n\t\t\t \n\t\t\t\t// Playback status updates\n         \tthis.player.addListener('player_state_changed', state => {\n         \t\tconsole.log(state);\n            \tthis.$socket.emit('stateChanged', {state});\n\t\t\t\t});\n\t\t\t\n\t\t\t\t// Ready\n          \tthis.player.addListener('ready', ({\n          \t  device_id\n          \t}) => {\n          \t\tconsole.log('Ready with Device ID', device_id);\n\t\t\t\t\tthis.$socket.emit('ready', {id: device_id});\n\t\t\t \t});\n\n\t\t\t \t// Not Ready\n          \tthis.player.addListener('not_ready', ({\n            \tdevice_id\n          \t}) => {\n            \tconsole.log('Device ID has gone offline', device_id);\n          \t});\n\n          \t// Connect to the player!\n          \tthis.player.connect().then(success => {\n            \tif (success) {\n              \tconsole.log('Webplayback SDK successfully connected to Spotify');\n            \t}\n\t\t\t \t});\n\t\t\t}\n\t\t}\n\t}\n}\n</script>\n\n<style>\n\n</style>\n"]}]}
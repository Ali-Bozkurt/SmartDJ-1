{"remainingRequest":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Chris/Desktop/Programming/VueVisualizer/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/src/App.vue","mtime":1548132469000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/cache-loader/dist/cjs.js","mtime":1546594483000},{"path":"/Users/Chris/Desktop/Programming/VueVisualizer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SpotifyService from '@/services/SpotifyService.js';\nimport Nav from '@/components/Nav.vue';\nimport Controls from '@/components/Controls';\nimport Hamburger from '@/components/Menu';\nimport screenfull from 'screenfull';\n\nexport default {\n  name: 'App',\n  components: {\n    Nav,\n    Controls,\n    Hamburger\n  },\n  data() {\n    return {\n      ext: null,\n      landing: true,\n      player: null,\n      playerId: '',\n      token: '',\n      artist: '',\n      album: '',\n      prevTrack: '',\n      track: '',\n      trackId: '',\n      paused: true,\n      refreshIntervalSet: false,\n      refreshInterval: 0,\n      mouseMoveSet: false,\n      isShowing: true,\n      timedelay: 1,\n      _delay: 0,\n      notifyCount: 0,\n    }\n  },\n  created() {\n    this.$wait.start('loading');\n    if(localStorage.access_token) {\n      this.landing = false;\n      this.refreshToken();\n      this.initVis();\n      this.$router.replace({name: 'visualizer'});\n    }\n  },\n  mounted() {\n\n  },\n  sockets: {\n    paused: function() {\n      this.$notify({\n          group: 'track',\n          title: this.track + \" - PAUSED\",\n          text: this.artist\n        });\n    },\n    played: function() {\n      this.$notify({\n          group: 'track',\n          title: this.track,\n          text: this.artist\n        });\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if(to.path === '/') {\n        this.terminateVis();\n      } else if(to.path === '/success') {\n        return;\n      } else {\n        this.initVis();\n      }\n    },\n  },\n  methods: {\n    initVis() {\n      this.landing = false;\n      if(this.token === '') {\n        this.getToken();\n      }\n      if(this.refreshIntervalSet === false) {\n        this.createRefreshInterval();\n        this.refreshIntervalSet = true;\n      }\n      if(this.mouseMoveSet === false) {\n        this._delay = setInterval(this.delayCheck, 500);\n        addEventListener('mousemove', this.mouseMove, false);\n        this.mouseMoveSet = true;\n      }\n      this.webPlayer();\n     /* var data = {\n        type: \"initbg\"\n      }\n      window.postMessage(data, \"*\");\n      data = {\n\t\t\t\ttype: \"initAudio\",\n\t\t\t}\n      window.postMessage(data, \"*\");*/\n    },\n    terminateVis() {\n      this.landing = true;\n      if(this.refreshIntervalSet === true) {\n        clearInterval(this.refreshInterval);\n        this.refreshIntervalSet = false;\n      }\n      if(this.mouseMoveSet === true) {\n        clearInterval(this._delay);\n        removeEventListener('mousemove', this.mouseMove, false);\n        this.mouseMoveSet = false;\n      }\n      if(this.player !== null) {\n        this.player.disconnect();\n        this.player = null;\n      }\n      /*var data = {\n        type: \"terminatebg\"\n      }\n      window.postMessage(data, \"*\");*/\n    },\n    async webPlayer() {\n      if(this.player === null) {\n        let webPlayerSDK = document.createElement('script');    \n\t\t    webPlayerSDK.setAttribute('src',\"https://sdk.scdn.co/spotify-player.js\");\n\t      document.head.appendChild(webPlayerSDK);\n\t\t  \twindow.onSpotifyWebPlaybackSDKReady = () => {\n     \t\tvar id;\n\t\t\t\tthis.player = new Spotify.Player({\n         \tname: 'Vue Visualizer',\n          getOAuthToken: cb => {\n\t\t\t\t\tthis.getToken();\n            cb(this.token);\n          }\n\t\t\t \t});\n\t\t\t \n\t\t\t \t// Error handling\n        this.player.addListener('initialization_error', ({\n          message\n      \t}) => {\n        \tconsole.error(message);\n      \t});\n        this.player.addListener('authentication_error', ({\n          message\n        }) => {\n          console.error(message);\n        });\n        this.player.addListener('account_error', ({\n        \tmessage\n        }) => {\n        \tconsole.error(message);\n        });\n        this.player.addListener('playback_error', ({\n          message\n        }) => {\n          console.error(message);\n\t\t\t \t});\n\t\t\t \n\t\t\t\t// Playback status updates\n        this.player.addListener('player_state_changed', state => {\n          this.stateChanged(state);\n\t\t\t\t});\n\t\t\t\n\t\t\t\t// Ready\n        this.player.addListener('ready', ({\n          device_id\n        }) => {\n          console.log('Ready with Device ID', device_id);\n          localStorage.setItem('device_id', device_id);\n          this.songLoaded = true;\n          this.playerId = device_id;\n\t\t\t\t\tthis.$socket.emit('ready', {player_id: this.playerId, token: this.token});\n\t\t\t \t});\n\n\t\t\t \t// Not Ready\n        this.player.addListener('not_ready', ({\n          device_id\n      \t}) => {\n          localStorage.removeItem('device_id');\n          this.songLoaded = false;\n          console.log('Device ID has gone offline', device_id);\n        });\n\n        // Connect to the player!\n        this.player.connect().then(success => {\n        \tif (success) {\n            console.log('Webplayback SDK successfully connected to Spotify');\n          }\n         });\n        }\n\t\t\t}\n      this.$socket.emit('ready', {player_id: this.playerId, access_token: this.token});\n    },\n    getToken() {\n      if(localStorage.access_token) {\n\t\t\t\tthis.token = localStorage.access_token;\n\t\t\t\tthis.tokenExists = true;\n      } else {\n        alert(\"Oops! Something went wrong linking your Spotify Account\");\n        this.tokenExists = false;\n\t\t\t}\n    },\n    async refreshToken() {\n      let refresh = localStorage.refresh_token;\n      const response = await SpotifyService.refreshToken(refresh);\n      if(response.data.success === true) {\n        let t_token = response.data.access_token;\n        localStorage.setItem('access_token', t_token);\n        this.token = t_token;\n        this.$socket.emit('tokenRefreshed', {token: this.token});\n      }\n    },\n    async createRefreshInterval() {\n      this.refreshInterval = setInterval(() => {\n        this.refreshToken();\n      }, 600000);\n    },\n    mouseMove() {\n      this.isShowing = true;\n      this.timedelay = 1;\n      clearInterval(this._delay);\n      this._delay = setInterval(this.delayCheck, 500);\n    },\n    delayCheck() {\n      if(this.paused === true) {\n        this.isShowing = true;\n        return;\n      }\n      if(this.timedelay === 4) {\n        this.isShowing = false;\n        this.timedelay = 1;\n      }\n      this.timedelay += 1;\n    },\n\t\tstateChanged(state) {\n      if(this.notifyCount >= 2) {\n        this.notifyCount = 0;\n      }\n      this.prevTrack = this.track;\n\t\t\tthis.track = state.track_window.current_track.name;\n      this.paused = state.paused;\n      this.artist = state.track_window.current_track.artists[0].name + \" | \" + state.track_window.current_track.album.name\n      this.notifyCount += 1;\n      if(this.paused !== true && this.notifyCount < 2 && this.track !== this.prevTrack){ \n        this.$notify({\n          group: 'track',\n          title: this.track,\n          text: this.artist\n        });\n        this.trackId = state.track_window.current_track.id;\n      }\n      this.$socket.emit('stateChanged', {state: state});\n    },\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id='app' :class=\"{show: isShowing}\">\n      <notifications group=\"track\" class='notif'/>\n      <Hamburger class='controls' :class=\"{show: isShowing}\" v-if='landing === false'></Hamburger>\n      <router-view/>\n      <div class='controls-wrapper' v-if='landing === false'>\n        <keep-alive>\n          <Controls :token='token' :artist='artist' :album='album' :track='track' :paused='paused' class='controls' :class=\"{show: isShowing}\"></Controls>\n        </keep-alive>\n      </div>\n  </div>\n</template>\n\n<script>\nimport SpotifyService from '@/services/SpotifyService.js';\nimport Nav from '@/components/Nav.vue';\nimport Controls from '@/components/Controls';\nimport Hamburger from '@/components/Menu';\nimport screenfull from 'screenfull';\n\nexport default {\n  name: 'App',\n  components: {\n    Nav,\n    Controls,\n    Hamburger\n  },\n  data() {\n    return {\n      ext: null,\n      landing: true,\n      player: null,\n      playerId: '',\n      token: '',\n      artist: '',\n      album: '',\n      prevTrack: '',\n      track: '',\n      trackId: '',\n      paused: true,\n      refreshIntervalSet: false,\n      refreshInterval: 0,\n      mouseMoveSet: false,\n      isShowing: true,\n      timedelay: 1,\n      _delay: 0,\n      notifyCount: 0,\n    }\n  },\n  created() {\n    this.$wait.start('loading');\n    if(localStorage.access_token) {\n      this.landing = false;\n      this.refreshToken();\n      this.initVis();\n      this.$router.replace({name: 'visualizer'});\n    }\n  },\n  mounted() {\n\n  },\n  sockets: {\n    paused: function() {\n      this.$notify({\n          group: 'track',\n          title: this.track + \" - PAUSED\",\n          text: this.artist\n        });\n    },\n    played: function() {\n      this.$notify({\n          group: 'track',\n          title: this.track,\n          text: this.artist\n        });\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if(to.path === '/') {\n        this.terminateVis();\n      } else if(to.path === '/success') {\n        return;\n      } else {\n        this.initVis();\n      }\n    },\n  },\n  methods: {\n    initVis() {\n      this.landing = false;\n      if(this.token === '') {\n        this.getToken();\n      }\n      if(this.refreshIntervalSet === false) {\n        this.createRefreshInterval();\n        this.refreshIntervalSet = true;\n      }\n      if(this.mouseMoveSet === false) {\n        this._delay = setInterval(this.delayCheck, 500);\n        addEventListener('mousemove', this.mouseMove, false);\n        this.mouseMoveSet = true;\n      }\n      this.webPlayer();\n     /* var data = {\n        type: \"initbg\"\n      }\n      window.postMessage(data, \"*\");\n      data = {\n\t\t\t\ttype: \"initAudio\",\n\t\t\t}\n      window.postMessage(data, \"*\");*/\n    },\n    terminateVis() {\n      this.landing = true;\n      if(this.refreshIntervalSet === true) {\n        clearInterval(this.refreshInterval);\n        this.refreshIntervalSet = false;\n      }\n      if(this.mouseMoveSet === true) {\n        clearInterval(this._delay);\n        removeEventListener('mousemove', this.mouseMove, false);\n        this.mouseMoveSet = false;\n      }\n      if(this.player !== null) {\n        this.player.disconnect();\n        this.player = null;\n      }\n      /*var data = {\n        type: \"terminatebg\"\n      }\n      window.postMessage(data, \"*\");*/\n    },\n    async webPlayer() {\n      if(this.player === null) {\n        let webPlayerSDK = document.createElement('script');    \n\t\t    webPlayerSDK.setAttribute('src',\"https://sdk.scdn.co/spotify-player.js\");\n\t      document.head.appendChild(webPlayerSDK);\n\t\t  \twindow.onSpotifyWebPlaybackSDKReady = () => {\n     \t\tvar id;\n\t\t\t\tthis.player = new Spotify.Player({\n         \tname: 'Vue Visualizer',\n          getOAuthToken: cb => {\n\t\t\t\t\tthis.getToken();\n            cb(this.token);\n          }\n\t\t\t \t});\n\t\t\t \n\t\t\t \t// Error handling\n        this.player.addListener('initialization_error', ({\n          message\n      \t}) => {\n        \tconsole.error(message);\n      \t});\n        this.player.addListener('authentication_error', ({\n          message\n        }) => {\n          console.error(message);\n        });\n        this.player.addListener('account_error', ({\n        \tmessage\n        }) => {\n        \tconsole.error(message);\n        });\n        this.player.addListener('playback_error', ({\n          message\n        }) => {\n          console.error(message);\n\t\t\t \t});\n\t\t\t \n\t\t\t\t// Playback status updates\n        this.player.addListener('player_state_changed', state => {\n          this.stateChanged(state);\n\t\t\t\t});\n\t\t\t\n\t\t\t\t// Ready\n        this.player.addListener('ready', ({\n          device_id\n        }) => {\n          console.log('Ready with Device ID', device_id);\n          localStorage.setItem('device_id', device_id);\n          this.songLoaded = true;\n          this.playerId = device_id;\n\t\t\t\t\tthis.$socket.emit('ready', {player_id: this.playerId, token: this.token});\n\t\t\t \t});\n\n\t\t\t \t// Not Ready\n        this.player.addListener('not_ready', ({\n          device_id\n      \t}) => {\n          localStorage.removeItem('device_id');\n          this.songLoaded = false;\n          console.log('Device ID has gone offline', device_id);\n        });\n\n        // Connect to the player!\n        this.player.connect().then(success => {\n        \tif (success) {\n            console.log('Webplayback SDK successfully connected to Spotify');\n          }\n         });\n        }\n\t\t\t}\n      this.$socket.emit('ready', {player_id: this.playerId, access_token: this.token});\n    },\n    getToken() {\n      if(localStorage.access_token) {\n\t\t\t\tthis.token = localStorage.access_token;\n\t\t\t\tthis.tokenExists = true;\n      } else {\n        alert(\"Oops! Something went wrong linking your Spotify Account\");\n        this.tokenExists = false;\n\t\t\t}\n    },\n    async refreshToken() {\n      let refresh = localStorage.refresh_token;\n      const response = await SpotifyService.refreshToken(refresh);\n      if(response.data.success === true) {\n        let t_token = response.data.access_token;\n        localStorage.setItem('access_token', t_token);\n        this.token = t_token;\n        this.$socket.emit('tokenRefreshed', {token: this.token});\n      }\n    },\n    async createRefreshInterval() {\n      this.refreshInterval = setInterval(() => {\n        this.refreshToken();\n      }, 600000);\n    },\n    mouseMove() {\n      this.isShowing = true;\n      this.timedelay = 1;\n      clearInterval(this._delay);\n      this._delay = setInterval(this.delayCheck, 500);\n    },\n    delayCheck() {\n      if(this.paused === true) {\n        this.isShowing = true;\n        return;\n      }\n      if(this.timedelay === 4) {\n        this.isShowing = false;\n        this.timedelay = 1;\n      }\n      this.timedelay += 1;\n    },\n\t\tstateChanged(state) {\n      if(this.notifyCount >= 2) {\n        this.notifyCount = 0;\n      }\n      this.prevTrack = this.track;\n\t\t\tthis.track = state.track_window.current_track.name;\n      this.paused = state.paused;\n      this.artist = state.track_window.current_track.artists[0].name + \" | \" + state.track_window.current_track.album.name\n      this.notifyCount += 1;\n      if(this.paused !== true && this.notifyCount < 2 && this.track !== this.prevTrack){ \n        this.$notify({\n          group: 'track',\n          title: this.track,\n          text: this.artist\n        });\n        this.trackId = state.track_window.current_track.id;\n      }\n      this.$socket.emit('stateChanged', {state: state});\n    },\n  }\n}\n</script>\n\n<style>\nhtml {\n  height: 100%;\n  overflow: hidden;\n}\nbody {\n  height: 100%;\n  overflow: hidden;\n}\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  height: 100%;\n  width:100%;\n  cursor: none;\n}\n.notif {\n  font-size: 40px;\n  margin-top: 20px;\n}\n.controls-wrapper{\n  position: absolute;\n  bottom: 30px;\n  width: 100%;\n}\n\n.controls {\n  margin: 0 auto;\n  pointer-events: none;\n  z-index: 1;\n  opacity: 0;\n  visibility: hidden;\n  display:none;\n  transition: visibility 0s, display .5s ease-in-out, opacity 2s ease-in-out;\n}\n.show {\n  display:flex;\n  opacity: 1;\n  visibility: visible;\n  pointer-events: all;\n  z-index: 1;\n  cursor: auto !important;\n}\n</style>\n"]}]}